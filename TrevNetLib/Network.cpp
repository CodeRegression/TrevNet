//--------------------------------------------------
// Implementation of class Network
//
// @author: Wild Boar
//
// @date: 2023-02-14
//--------------------------------------------------

#include "Network.h"
using namespace NVL_AI;

//--------------------------------------------------
// Constructors and Terminators
//--------------------------------------------------

/**
 * @brief Custom Constructor
 * @param generator A random generator for the random weights
 * @param structure The structure for the network
 */
Network::Network(NumberGenerator * generator, const vector<int>& structure)
{
	throw runtime_error("Not implemented");
}

/**
 * @brief Main Terminator
 */
Network::~Network()
{
	// TODO: Add teardown logic here
}

//--------------------------------------------------
// Evaluation
//--------------------------------------------------

/**
 * @brief Defines the logic to evaluate the function
 * @param inputs The inputs to the function
 * @param outputs The outputs generated by the network
 */
void Network::Evaluate(const vector<double>& inputs, vector<double>& outputs)
{
	throw runtime_error("Not implemented");
}

//--------------------------------------------------
// Update
//--------------------------------------------------

/**
 * @brief BackPropagation logic to update the network
 * @param inputs Test inputs to generate the expected output
 * @param expectedOutputs The outputs that we are using
 * @param learnRate The given learn rate parameter
 * @return double Returns a double
 */
double Network::Update(const vector<double>& inputs, const vector<double>& expectedOutputs, double learnRate)
{
	throw runtime_error("Not implemented");
}
