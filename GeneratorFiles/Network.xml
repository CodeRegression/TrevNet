<?xml version="1.0" ?>

<class terminator="true">

<namespace>NVL_AI</namespace>
<solution>TrevNetLib</solution>
<name>Network</name>
<description>The main wrapper for the network functionality</description>

<includes>
    <include name="iostream" namespace="std" local="false" />
    <include name="NetworkUtils.h" local="true" />
    <include name="Generator/NumberGenerator.h" local="true" />
</includes>

<variables>
    <variable type="vector<Layer *>" name="network" code="10" />
</variables>

<constructors>
    <constructor type="custom" inline="false">
        <parameter type="NumberGenerator *" name="generator" description="A random generator for the random weights" />
        <parameter type="const vector<int>&" name="structure" description="The structure for the network" />
    </constructor>
</constructors>

<methods>

    <!-- Add the logic to evaulate the given functionality -->
    <method section="Evaluation" access="public" return="void" name="Evaluate" description="Defines the logic to evaluate the function" inline="false">
        <parameter type="const vector<double>&" name="inputs" description="The inputs to the function" />
        <parameter type="vector<double>&" name="outputs" description="The outputs generated by the network" />
    </method>    

    <!-- Add the logic to "correct" the network -->
    <method section="Update" access="public" return="double" name="Update" description="BackPropagation logic to update the network" inline="false">
        <parameter type="const vector<double>&" name="inputs" description="Test inputs to generate the expected output" />
        <parameter type="const vector<double>&" name="expectedOutputs" description="The outputs that we are using" />
        <parameter type="double" name="learnRate" description="The given learn rate parameter" />
    </method>

</methods>

<tests>
    <test name="confirm_network" description="Make sure that the network has the expected structure" exception="false" />
    <test name="evaluate" description="Confirm that the network is able to evaluate expressions" exception="false" />
    <test name="update" description="Confirm that the network is capable of performing an update" exception="false" />
</tests> 

</class>